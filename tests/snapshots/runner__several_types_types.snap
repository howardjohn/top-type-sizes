---
source: tests/runner.rs
expression: types
---
[
    Type {
        name: "std::fmt::Formatter<'_>",
        size: 64,
        align: 8,
        kind: Struct(
            StructType {
                items: [
                    Field(
                        Field {
                            name: "buf",
                            size: 16,
                            align: None,
                            offset: None,
                        },
                    ),
                    Field(
                        Field {
                            name: "width",
                            size: 16,
                            align: None,
                            offset: None,
                        },
                    ),
                    Field(
                        Field {
                            name: "precision",
                            size: 16,
                            align: None,
                            offset: None,
                        },
                    ),
                    Field(
                        Field {
                            name: "flags",
                            size: 4,
                            align: None,
                            offset: None,
                        },
                    ),
                    Field(
                        Field {
                            name: "fill",
                            size: 4,
                            align: None,
                            offset: None,
                        },
                    ),
                    Field(
                        Field {
                            name: "align",
                            size: 1,
                            align: None,
                            offset: None,
                        },
                    ),
                ],
            },
        ),
        end_padding: Some(
            7,
        ),
    },
    Type {
        name: "std::fmt::rt::v1::Argument",
        size: 56,
        align: 8,
        kind: Struct(
            StructType {
                items: [
                    Field(
                        Field {
                            name: "format",
                            size: 48,
                            align: None,
                            offset: None,
                        },
                    ),
                    Field(
                        Field {
                            name: "position",
                            size: 8,
                            align: None,
                            offset: None,
                        },
                    ),
                ],
            },
        ),
        end_padding: None,
    },
    Type {
        name: "std::fmt::Arguments<'_>",
        size: 48,
        align: 8,
        kind: Struct(
            StructType {
                items: [
                    Field(
                        Field {
                            name: "fmt",
                            size: 16,
                            align: None,
                            offset: None,
                        },
                    ),
                    Field(
                        Field {
                            name: "pieces",
                            size: 16,
                            align: None,
                            offset: None,
                        },
                    ),
                    Field(
                        Field {
                            name: "args",
                            size: 16,
                            align: None,
                            offset: None,
                        },
                    ),
                ],
            },
        ),
        end_padding: None,
    },
    Type {
        name: "std::fmt::rt::v1::FormatSpec",
        size: 48,
        align: 8,
        kind: Struct(
            StructType {
                items: [
                    Field(
                        Field {
                            name: "precision",
                            size: 16,
                            align: None,
                            offset: None,
                        },
                    ),
                    Field(
                        Field {
                            name: "width",
                            size: 16,
                            align: None,
                            offset: None,
                        },
                    ),
                    Field(
                        Field {
                            name: "flags",
                            size: 4,
                            align: None,
                            offset: None,
                        },
                    ),
                    Field(
                        Field {
                            name: "fill",
                            size: 4,
                            align: None,
                            offset: None,
                        },
                    ),
                    Field(
                        Field {
                            name: "align",
                            size: 1,
                            align: None,
                            offset: None,
                        },
                    ),
                ],
            },
        ),
        end_padding: Some(
            7,
        ),
    },
    Type {
        name: "std::result::Result<std::string::String, std::env::VarError>",
        size: 32,
        align: 8,
        kind: Enum(
            EnumType {
                discriminant_size: Some(
                    8,
                ),
                variants: [
                    EnumVariant {
                        name: "Ok",
                        size: 24,
                        items: [
                            Field(
                                Field {
                                    name: "0",
                                    size: 24,
                                    align: None,
                                    offset: None,
                                },
                            ),
                        ],
                    },
                    EnumVariant {
                        name: "Err",
                        size: 24,
                        items: [
                            Field(
                                Field {
                                    name: "0",
                                    size: 24,
                                    align: None,
                                    offset: None,
                                },
                            ),
                        ],
                    },
                ],
            },
        ),
        end_padding: None,
    },
    Type {
        name: "unwind::libunwind::_Unwind_Exception",
        size: 32,
        align: 8,
        kind: Struct(
            StructType {
                items: [
                    Field(
                        Field {
                            name: "exception_class",
                            size: 8,
                            align: None,
                            offset: None,
                        },
                    ),
                    Field(
                        Field {
                            name: "exception_cleanup",
                            size: 8,
                            align: None,
                            offset: None,
                        },
                    ),
                    Field(
                        Field {
                            name: "private",
                            size: 16,
                            align: None,
                            offset: None,
                        },
                    ),
                ],
            },
        ),
        end_padding: None,
    },
]
